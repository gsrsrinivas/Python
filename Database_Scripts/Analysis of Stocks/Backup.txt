------------------------------------------------------------------------------------------------------------------------------------------------------------
-- from reset script.sql 
begin -- price action 
;WITH AdjustedValues AS (
    SELECT 
        symbol,
        timeline,
        batch_no,
        CASE 
            WHEN direction LIKE 'less than equal to%' THEN 
                -1 * CAST(REPLACE(REPLACE(indicator, 'price action ', ''), ' candle', '') AS INT)
            WHEN direction LIKE 'greater than equal to%' THEN 
                CAST(REPLACE(REPLACE(indicator, 'price action ', ''), ' candle', '') AS INT)
            ELSE NULL
        END AS adjusted_value
    FROM 
        _sis.Cash_Stocks
    WHERE 1=1 
        -- and batch_no = (SELECT MAX(batch_no) FROM _sis.Cash_Stocks)
        AND indicator LIKE '%price action%'
        AND (direction LIKE 'greater than equal to%' OR direction LIKE 'less than equal to%')
),
Grouped AS (
    SELECT 
        symbol,
        timeline,
        batch_no,
        adjusted_value
    FROM AdjustedValues
    WHERE adjusted_value IS NOT NULL
),
Formatted AS (
    SELECT 
        symbol,
        timeline,
        batch_no,
        STRING_AGG(adjusted_value, ', ') 
            WITHIN GROUP (ORDER BY ABS(adjusted_value)) AS value_list,
        CASE timeline
            WHEN 'yearly' THEN 1
            WHEN 'half-yearly' THEN 2
            WHEN 'quarterly' THEN 3
            WHEN 'monthly' THEN 4
            WHEN 'weekly' THEN 5
            WHEN 'daily' THEN 6
            WHEN '4 hourly' THEN 7
            WHEN '1 hourly' THEN 8
            WHEN '15 minutes' THEN 9
            ELSE 10
        END AS timeline_order
    FROM Grouped
    GROUP BY symbol, timeline, batch_no
), 
Price_Action_Final as ( 
	SELECT 
		symbol,
		batch_no,
		replace('{' + STRING_AGG(
			CONCAT('"', timeline,'" : [', value_list, '],'), 
			' '
		) WITHIN GROUP (ORDER BY timeline_order) + '}',',}','}') AS price_action_aggregate 
	FROM Formatted
	GROUP BY symbol, batch_no
)
Update a set a.[price_action] = price_action_aggregate
from [_sis].[Analyse_Stocks] a join Price_Action_Final b 
on a.Symbol = b.symbol and a.Batch_No = b.batch_no
;

INSERT INTO _sis.Analyse_Stocks__Price_Action_table (Row_id,Batch_no,symbol,Timeframe,Value)
SELECT ROW_NUMBER() OVER (PARTITION BY s.batch_no,s.symbol ORDER BY outerJson.[key],abs(innerJson.[value])) AS Row_Id,
	s.Batch_no,s.symbol,
    outerJson.[key] AS Timeframe,
    innerJson.[value] AS Value
FROM _sis.Analyse_Stocks s
CROSS APPLY OPENJSON(s.price_action) AS outerJson
CROSS APPLY OPENJSON(outerJson.[value]) AS innerJson
-- where s.Batch_No = (select MAX(Batch_No) from _sis.Analyse_Stocks)
order by 3,4,5,abs(innerJson.[value])
;
end
------------------------------------------------------------------------------------------------------------------------------------------------------------ 
-- from update_report_queries
begin -- price action 
;WITH AdjustedValues AS (
    SELECT 
        symbol,
        timeline,
        batch_no,
        CASE 
            WHEN direction LIKE 'less than equal to%' THEN 
                -1 * CAST(REPLACE(REPLACE(indicator, 'price action ', ''), ' candle', '') AS INT)
            WHEN direction LIKE 'greater than equal to%' THEN 
                CAST(REPLACE(REPLACE(indicator, 'price action ', ''), ' candle', '') AS INT)
            ELSE NULL
        END AS adjusted_value
    FROM 
        _sis.Cash_Stocks
    WHERE 
        batch_no = (SELECT MAX(batch_no) FROM _sis.Cash_Stocks)
        AND indicator LIKE '%price action%'
        AND (direction LIKE 'greater than equal to%' OR direction LIKE 'less than equal to%')
),
Grouped AS (
    SELECT 
        symbol,
        timeline,
        batch_no,
        adjusted_value
    FROM AdjustedValues
    WHERE adjusted_value IS NOT NULL
),
Formatted AS (
    SELECT 
        symbol,
        timeline,
        batch_no,
        STRING_AGG(adjusted_value, ', ') 
            WITHIN GROUP (ORDER BY ABS(adjusted_value)) AS value_list,
        CASE timeline
            WHEN 'yearly' THEN 1
            WHEN 'half-yearly' THEN 2
            WHEN 'quarterly' THEN 3
            WHEN 'monthly' THEN 4
            WHEN 'weekly' THEN 5
            WHEN 'daily' THEN 6
            WHEN '4 hourly' THEN 7
            WHEN '1 hourly' THEN 8
            WHEN '15 minutes' THEN 9
            ELSE 10
        END AS timeline_order
    FROM Grouped
    GROUP BY symbol, timeline, batch_no
), 
Price_Action_Final as ( 
	SELECT 
		symbol,
		batch_no,
		replace('{' + STRING_AGG(
			CONCAT('"', timeline,'" : [', value_list, '],'), 
			' '
		) WITHIN GROUP (ORDER BY timeline_order) + '}',',}','}') AS price_action_aggregate 
	FROM Formatted
	GROUP BY symbol, batch_no
)
Update a set a.[price_action] = price_action_aggregate
from [_sis].[Analyse_Stocks] a join Price_Action_Final b 
on a.Symbol = b.symbol and a.Batch_No = b.batch_no
;
INSERT INTO _sis.Analyse_Stocks__Price_Action_table (Row_id,Batch_no,symbol, Timeframe, Value)
SELECT ROW_NUMBER() OVER (PARTITION BY s.batch_no,s.symbol ORDER BY outerJson.[key],abs(innerJson.[value])) AS Row_Id,
	s.Batch_no,s.symbol,
    outerJson.[key] AS Timeframe,
    innerJson.[value] AS Value
FROM _sis.Analyse_Stocks s
CROSS APPLY OPENJSON(s.price_action) AS outerJson
CROSS APPLY OPENJSON(outerJson.[value]) AS innerJson
where s.Batch_No = (select MAX(Batch_No) from _sis.Analyse_Stocks)
order by 3,4,5,abs(innerJson.[value])
;
end
------------------------------------------------------------------------------------------------------------------------------------------------------------ 
-- from rest script.sql
begin -- sorted trade type details
;WITH SplitSignals AS (
    SELECT distinct
        batch_no,sno,[trade type details],
        TRIM(value) AS Signal
    FROM _sis.Analyse_Stocks
    CROSS APPLY STRING_SPLIT(replace(replace(replace([trade type details],'; ',';'),'(',''),')',''), ';')
    WHERE value <> '' -- and Batch_No = (select MAX(Batch_No) from _sis.Analyse_Stocks)
	-- order by Batch_No,Sno
)
,OrderedSignals AS (
    SELECT TOP 100 PERCENT
        batch_no,sno,ss.[order],[trade type details],
        Signal
    FROM SplitSignals Ps
    LEFT JOIN _sis.ScreenSort ss 
	ON ps.Signal = replace(ss.Name,'_',' ')
	order by batch_no,sno,ss.[order]
) -- select * from OrderedSignals
,final as (
SELECT 
    Batch_No,Sno,[trade type details],
    STRING_AGG(Signal, '; ') WITHIN GROUP (ORDER BY Batch_No,Sno,[order] ASC)  AS SortedSignalString
FROM OrderedSignals
GROUP BY Batch_No,Sno,[trade type details]
)
update a
set [trade type details] = SortedSignalString
from _sis.Analyse_Stocks a
inner join final b on a.Batch_No = b.Batch_No and a.Sno = b.Sno
;
end
------------------------------------------------------------------------------------------------------------------------------------------------------------ 

-- from update_report_query
begin -- sorted trade type details
;WITH SplitSignals AS (
    SELECT distinct
        batch_no,sno,[trade type details],
        TRIM(value) AS Signal
    FROM _sis.Analyse_Stocks
    CROSS APPLY STRING_SPLIT(replace(replace(replace([trade type details],'; ',';'),'(',''),')',''), ';')
    WHERE value <> '' and Batch_No = (select MAX(Batch_No) from _sis.Analyse_Stocks)
) 
,OrderedSignals AS (
    SELECT TOP 100 PERCENT
        batch_no,sno,ss.[order],[trade type details],
        Signal
    FROM SplitSignals Ps
    LEFT JOIN _sis.ScreenSort ss 
	ON ps.Signal = replace(ss.Name,'_',' ')
	order by batch_no,sno,ss.[order]
)
,final as (
SELECT 
    Batch_No,Sno,[trade type details],
    STRING_AGG(Signal, '; ') WITHIN GROUP (ORDER BY Batch_No,Sno,[order] ASC)  AS SortedSignalString
FROM OrderedSignals
GROUP BY Batch_No,Sno,[trade type details]
)
update a
set [trade type details] = SortedSignalString
from _sis.Analyse_Stocks a
inner join final b on a.Batch_No = b.Batch_No and a.Sno = b.Sno
;
end
------------------------------------------------------------------------------------------------------------------------------------------------------------ 
